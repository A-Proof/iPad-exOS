{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "light-gray",
    "glyph" : "magic"
  },
  "name" : "ExOS (scriptable dependency)",
  "script" : "\/\/ === ExOS all-in-one Scriptable script ===\n\/\/ Author: Commander Arthur's ChatGPT co-pilot ðŸ¤–ðŸš€\n\/\/ Loads settings, boots, and runs a terminal with web clips and user config.\n\n\/\/ === Setup File Manager & Paths ===\nconst fm = FileManager.iCloud();\nconst settingsFile = fm.joinPath(fm.documentsDirectory(), \"ExOS-Settings.json\");\n\n\/\/ === Default Settings & State ===\nconst defaultSettings = {\n  username: \"Commander Arthur\",\n  theme: \"dark\",\n  bootSound: true,\n  animations: true,\n  lastBoot: new Date().toISOString(),\n  webClips: []  \/\/ array of {name, url, createdAt}\n};\n\nlet settings = {};\n\n\/\/ === Helper Functions ===\nasync function saveSettings() {\n  const json = JSON.stringify(settings, null, 2);\n  fm.writeString(settingsFile, json);\n}\n\nasync function loadSettings() {\n  if (!fm.fileExists(settingsFile)) {\n    settings = defaultSettings;\n    await saveSettings();\n  } else {\n    await fm.downloadFileFromiCloud(settingsFile);\n    const json = fm.readString(settingsFile);\n    try {\n      settings = JSON.parse(json);\n    } catch {\n      console.log(\"Failed to parse settings; resetting to default.\");\n      settings = defaultSettings;\n      await saveSettings();\n    }\n  }\n}\n\n\/\/ Print help menu\nfunction printHelp() {\n  console.log(`\nCommands:\n help               - Show this menu\n show settings      - Display current user settings\n edit settings      - Edit username and theme\n list clips         - List all saved web clips\n add clip           - Add a new web clip by URL\n remove clip <num>  - Remove a web clip by number\n export clip <num>  - Export DNS profile to install web clip\n exit               - Exit terminal\n`);\n}\n\n\/\/ Display current settings\nfunction showSettings() {\n  console.log(`Username: ${settings.username}`);\n  console.log(`Theme: ${settings.theme}`);\n  console.log(`Boot sound: ${settings.bootSound ? \"On\" : \"Off\"}`);\n  console.log(`Animations: ${settings.animations ? \"On\" : \"Off\"}`);\n  console.log(`Last Boot: ${settings.lastBoot}`);\n}\n\n\/\/ List all web clips\nfunction listClips() {\n  if (settings.webClips.length === 0) {\n    console.log(\"No web clips found.\");\n    return;\n  }\n  console.log(\"Web Clips:\");\n  settings.webClips.forEach((clip, idx) => {\n    console.log(` [${idx + 1}] ${clip.name} - ${clip.url}`);\n  });\n}\n\n\/\/ Add a new web clip (uses Scriptable Alert)\nasync function addClip() {\n  let alert = new Alert();\n  alert.title = \"Add New Web Clip\";\n  alert.message = \"Enter the URL (must start with https:\/\/)\";\n  alert.addTextField(\"URL\", \"https:\/\/\");\n  alert.addAction(\"Add\");\n  alert.addCancelAction(\"Cancel\");\n  let idx = await alert.presentAlert();\n  if (idx === -1) {\n    console.log(\"Add cancelled.\");\n    return;\n  }\n  let url = alert.textFieldValue(0).trim();\n  if (!url.startsWith(\"https:\/\/\") && !url.startsWith(\"http:\/\/\")) {\n    console.log(\"Invalid URL. Must start with http:\/\/ or https:\/\/\");\n    return;\n  }\n  let clipName = `WebClip-${settings.webClips.length + 1}`;\n  settings.webClips.push({ name: clipName, url: url, createdAt: new Date().toISOString() });\n  await saveSettings();\n  console.log(`Added new clip: ${clipName} -> ${url}`);\n}\n\n\/\/ Remove a web clip by number\nasync function removeClip(numStr) {\n  let num = parseInt(numStr);\n  if (isNaN(num) || num < 1 || num > settings.webClips.length) {\n    console.log(\"Invalid clip number.\");\n    return;\n  }\n  let removed = settings.webClips.splice(num - 1, 1)[0];\n  await saveSettings();\n  console.log(`Removed clip: ${removed.name}`);\n}\n\n\/\/ Export DNS profile for web clip installation (simplified)\n\/\/ Saves a .mobileconfig file for iOS web clip profile installation\nasync function exportClip(numStr) {\n  let num = parseInt(numStr);\n  if (isNaN(num) || num < 1 || num > settings.webClips.length) {\n    console.log(\"Invalid clip number.\");\n    return;\n  }\n  let clip = settings.webClips[num - 1];\n  \n  \/\/ Simple mobileconfig XML content with web clip payload\n  let payloadUUID = cryptoRandomUUID();\n  let plist = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>PayloadContent<\/key>\n  <array>\n    <dict>\n      <key>FullScreen<\/key><true\/>\n      <key>Icon<\/key><data><\/data> <!-- No icon -->\n      <key>IsRemovable<\/key><true\/>\n      <key>Label<\/key><string>${clip.name}<\/string>\n      <key>PayloadDescription<\/key><string>Adds a web clip to the home screen.<\/string>\n      <key>PayloadDisplayName<\/key><string>${clip.name}<\/string>\n      <key>PayloadIdentifier<\/key><string>com.example.webclip.${payloadUUID}<\/string>\n      <key>PayloadType<\/key><string>com.apple.webClip.managed<\/string>\n      <key>PayloadUUID<\/key><string>${payloadUUID}<\/string>\n      <key>PayloadVersion<\/key><integer>1<\/integer>\n      <key>Precomposed<\/key><true\/>\n      <key>URL<\/key><string>${clip.url}<\/string>\n    <\/dict>\n  <\/array>\n  <key>PayloadDisplayName<\/key><string>ExOS Web Clip Profile<\/string>\n  <key>PayloadIdentifier<\/key><string>com.example.webclipprofile.${payloadUUID}<\/string>\n  <key>PayloadRemovalDisallowed<\/key><false\/>\n  <key>PayloadType<\/key><string>Configuration<\/string>\n  <key>PayloadUUID<\/key><string>${payloadUUID}<\/string>\n  <key>PayloadVersion<\/key><integer>1<\/integer>\n<\/dict>\n<\/plist>`;\n  \n  \/\/ Save to Documents folder\n  let exportPath = fm.joinPath(fm.documentsDirectory(), `${clip.name.replace(\/ \/g,\"_\")}.mobileconfig`);\n  fm.writeString(exportPath, plist);\n  \n  console.log(`Exported profile for '${clip.name}' at:`);\n  console.log(exportPath);\n  console.log(\"Open this file on your iPad to install the web clip profile.\");\n}\n\n\/\/ Edit username and theme (alert)\nasync function editSettings() {\n  let alert = new Alert();\n  alert.title = \"Edit ExOS Settings\";\n  alert.message = \"Change your username and theme (dark or light)\";\n  alert.addTextField(\"Username\", settings.username);\n  alert.addTextField(\"Theme\", settings.theme);\n  alert.addAction(\"Save\");\n  alert.addCancelAction(\"Cancel\");\n  let idx = await alert.presentAlert();\n  if (idx === -1) {\n    console.log(\"Edit cancelled.\");\n    return;\n  }\n  let usernameInput = alert.textFieldValue(0).trim();\n  let themeInput = alert.textFieldValue(1).trim().toLowerCase();\n  if (usernameInput.length > 0) settings.username = usernameInput;\n  if (themeInput === \"dark\" || themeInput === \"light\") {\n    settings.theme = themeInput;\n  } else {\n    console.log(\"Invalid theme. Keeping previous value.\");\n  }\n  await saveSettings();\n  console.log(\"Settings saved.\");\n}\n\n\/\/ Generate a UUID (Scriptable 1.9+ supports crypto.randomUUID)\nfunction cryptoRandomUUID() {\n  if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n    return crypto.randomUUID();\n  }\n  \/\/ Fallback simple UUID v4 generator:\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\/[xy]\/g, function(c) {\n    let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n\/\/ === Terminal Input Loop ===\nasync function terminalLoop() {\n  printHelp();\n  while (true) {\n    let inputAlert = new Alert();\n    inputAlert.title = `${settings.username}@ExOS`;\n    inputAlert.message = \"Type command (help for list):\";\n    inputAlert.addTextField(\"Command\", \"\");\n    inputAlert.addAction(\"Enter\");\n    inputAlert.addCancelAction(\"Exit Terminal\");\n    let idx = await inputAlert.presentAlert();\n    if (idx === -1) {\n      console.log(\"Exiting terminal. Goodbye!\");\n      break;\n    }\n    let input = inputAlert.textFieldValue(0).trim();\n    if (!input) continue;\n    \n    let [cmd, ...args] = input.split(\" \");\n    \n    switch (cmd.toLowerCase()) {\n      case \"help\":\n        printHelp();\n        break;\n      case \"show\":\n        if (args[0] === \"settings\") {\n          showSettings();\n        } else {\n          console.log(\"Unknown 'show' argument.\");\n        }\n        break;\n      case \"edit\":\n        if (args[0] === \"settings\") {\n          await editSettings();\n        } else {\n          console.log(\"Unknown 'edit' argument.\");\n        }\n        break;\n      case \"list\":\n        if (args[0] === \"clips\") {\n          listClips();\n        } else {\n          console.log(\"Unknown 'list' argument.\");\n        }\n        break;\n      case \"add\":\n        if (args[0] === \"clip\") {\n          await addClip();\n        } else {\n          console.log(\"Unknown 'add' argument.\");\n        }\n        break;\n      case \"remove\":\n        if (args[0] === \"clip\") {\n          await removeClip(args[1]);\n        } else {\n          console.log(\"Unknown 'remove' argument.\");\n        }\n        break;\n      case \"export\":\n        if (args[0] === \"clip\") {\n          await exportClip(args[1]);\n        } else {\n          console.log(\"Unknown 'export' argument.\");\n        }\n        break;\n      case \"exit\":\n        console.log(\"Exiting terminal. Goodbye!\");\n        return;\n      default:\n        console.log(`Unknown command: ${cmd}`);\n    }\n  }\n}\n\n\/\/ === Boot Sequence ===\nasync function boot() {\n  console.log(\"ðŸš€ Booting ExOS...\");\n  await loadSettings();\n  settings.lastBoot = new Date().toISOString();\n  await saveSettings();\n  \n  console.log(`Welcome back, ${settings.username}!`);\n  await terminalLoop();\n}\n\nawait boot();\n",
  "share_sheet_inputs" : [

  ]
}